<%

//response.contentType = 'text/rjavascript';
include("/jagg/jagg.jag");
var site = require("/site/conf/site.json");

var verb = request.getMethod();
var search = request.getParameter('search');
var data = request.getContent();
var log = new Log();
var topic = request.getParameter('topic');
var topicId;
var start;
var count;
var msg = require("/site/conf/ui-messages.jag");
var user = null;



var topicsPerPage = parseInt(site.forum.topicsPerPage);
var repliesPerPage = parseInt(site.forum.repliesPerPage);
var resourceIdentifier = site.forum.resourceIdentifier;
var tenantDomain = "carbon.super";
var date = new Date();

var uri = request.getRequestURI();
var callPath = uri.replace("/store/forum/api/topic", "");

if (uri != null) {
    var uriMatcher = new URIMatcher(callPath);

    if (uriMatcher.match("/{topicId}/{page}")) {
        topicId = uriMatcher.elements().topicId;
    }
    if (uriMatcher.match("/{topicId}/")) {
        topicId = uriMatcher.elements().topicId;
    }
}

var storeForum = Packages.org.wso2.carbon.forum.registry.RegistryForumManager;
var forum = new storeForum();

var forumTopicDTO = Packages.org.wso2.carbon.forum.dto.ForumTopicDTO;
var ForumPermissionDTO = Packages.org.wso2.carbon.forum.dto.ForumPermissionDTO;
var ForumPermission = Packages.org.wso2.carbon.forum.ForumPermission;
var APIConstants = Packages.org.wso2.carbon.apimgt.impl.APIConstants;
var Set = Packages.java.util.Set;
var HashSet = Packages.java.util.HashSet;
var System = Packages.java.lang.System;
var topicDTO = new forumTopicDTO();

var message = { error : false };

//Handle exceptions related to user checks
try{

if (verb == "DELETE" && topicId != null) {

    var user = getUser();
    //@todo : need to check if the topic belongs to the loged in user
    forum.removeTopic(topicId, user.username, tenantDomain);


} else if (verb == "GET" && topicId != null && search == null) {

    message.page = request.getParameter('page');
    start = (message.page - 1) * repliesPerPage;
    count = repliesPerPage;

    var username = null;
    try{
        user = getUser();
        username = user.username;
    }catch(Err){}
    
    var topicWithReplies = forum.fetchForumTopicWithReplies(topicId, start, count, username, tenantDomain);

    var repliesArray = {
        topic: [],
        replies: []

    };

    repliesArray.topic.push({
        "subject": topicWithReplies.getSubject(),
        "description": topicWithReplies.getDescription(),
        "topicId" : topicWithReplies.getTopicId()
    });
    var list = topicWithReplies.getReplies();
    var repCount = Number(topicWithReplies.getReplyCount());
    if (repCount != 0) {
        repCount = repCount - 1;
    }
    if (repCount != 0 && list != null) {

        for (var i = 0; i < list.size(); i++) {
            var item = list.get(i);

            repliesArray.replies.push({
                "reply": item.getReply(),
                "time": item.getTimestamp().toString(),
                "date": getDate(item.getCreatedDate()),
                "replyId": item.getReplyId(),
                "createdBy": item.getCreatedBy(),
                "timeStamp": getTime(item.getTimestamp())
            });

        }

        message.total_pages = Math.ceil(repCount / repliesPerPage);
        // message.total_pages = 10;

    }


    var replyList = stringify(repliesArray);
    message.data = parse(replyList);


} else if (verb == "PUT") {

    var user = getUser();

    topicDTO.setTopicId(data.topicId);
    topicDTO.setSubject(data.subject);
    topicDTO.setTopicOwner(user.username);
    topicDTO.setDescription(data.description);
    topicDTO.setCreatedDate(date);
    topicDTO.setTopicOwnerTenantDomain(tenantDomain);
    topicDTO.setTopicResourceIdentifier(resourceIdentifier);


    forum.updateTopic(topicDTO);


} else if (verb == "GET" && search != null) {
    message.page = request.getParameter('page');

    start = (message.page - 1) * topicsPerPage;
    count = topicsPerPage;

    var topicsArray = {
        topics: []
    };

    var username = null;
    try{
        user = getUser();
        username = user.username;
    }catch(Err){}

    var object = forum.searchTopicsBySubject(start, count,search, username, tenantDomain);


    if (object != null) {
        var list = object.getPaginatedResults();

        for (var i = 0; i < list.size(); i++) {
            var item = list.get(i);
            var replyCount = 0;
            if (item.replyCount != 0) {
                replyCount = item.getReplyCount() - 1;
            }


            topicsArray.topics.push({
                "subject": item.getSubject(),
                "description": item.getDescription(),
                "topicOwner": item.getTopicOwner(),
                "topicId": item.getTopicId(),
                "replyCount": replyCount.toString()

            });

        }
        message.total_pages = Math.ceil(object.getTotalResultCount() / topicsPerPage);
    }
    var topicList = stringify(topicsArray.topics);
    message.data = parse(topicList);

}else if (verb == "POST") {

    var user = getUser();

    topicDTO.setSubject(data.subject);
    topicDTO.setTopicOwner(user.username);
    topicDTO.setDescription(data.description);
    topicDTO.setCreatedDate(date);
    topicDTO.setTopicOwnerTenantDomain(tenantDomain);
    topicDTO.setTopicResourceIdentifier(resourceIdentifier);
    topicDTO.setTimestamp(System.currentTimeMillis());

    message.id = forum.addTopic(topicDTO);

    var everyOnePermission = new ForumPermissionDTO();
    everyOnePermission.setRole(APIConstants.EVERYONE_ROLE);
    everyOnePermission.setPermissions(new HashSet());
    everyOnePermission.getPermissions().add(ForumPermission.GET);
    everyOnePermission.getPermissions().add(ForumPermission.PUT);

    var anonGetPermission = new ForumPermissionDTO();
    anonGetPermission.setRole(APIConstants.ANONYMOUS_ROLE);
    anonGetPermission.setPermissions(new HashSet());
    anonGetPermission.getPermissions().add(ForumPermission.GET);

    var anonPutPermission = new ForumPermissionDTO();
    anonPutPermission.setRole(APIConstants.ANONYMOUS_ROLE);
    anonPutPermission.setPermissions(new HashSet());
    anonPutPermission.getPermissions().add(ForumPermission.PUT);

    var allowedRoles = new HashSet();

    if("common" == resourceIdentifier){
        allowedRoles.add(everyOnePermission);
        allowedRoles.add(anonGetPermission);
    }

    var deniedRoles = new HashSet();
    deniedRoles.add(anonPutPermission);

    forum.applyPermissions(resourceIdentifier, tenantDomain, allowedRoles, deniedRoles);

} else if (verb == "GET" && topicId == null && search == null) {
    message.page = request.getParameter('page');

    start = (message.page - 1) * topicsPerPage;
    count = topicsPerPage;

    var topicsArray = {
        topics: []
    };

    var username = null;
    try{
        user = getUser();
        username = user.username;
    }catch(Err){}
    var object = forum.fetchForumTopics(start, count, tenantDomain, username);


    if (object != null) {
        var list = object.getPaginatedResults();

        for (var i = 0; i < list.size(); i++) {
            var item = list.get(i);
            var replyCount = 0;
            if (item.replyCount != 0) {
                replyCount = item.getReplyCount() - 1;
            }


            topicsArray.topics.push({
                "subject": item.getSubject(),
                "description": item.getDescription(),
                "topicOwner": item.getTopicOwner(),
                "topicId": item.getTopicId(),
                "replyCount": replyCount.toString()

            });

        }
        message.total_pages = Math.ceil(object.getTotalResultCount() / topicsPerPage);
    }
    var topicList = stringify(topicsArray.topics);
    message.data = parse(topicList);
}
}catch(Err){
    message.error = true;
    message.message = Err;
}

print(message);

function getDate(date) {
    var dateStr = date.toString();
    var splitArray = dateStr.split(" ");
    var createdDate = splitArray[0] + " " + splitArray[1] + " " + splitArray[2] + " " + splitArray[5];
    return createdDate;
}

function getTime(time) {
    var date = new Date(time);
    var strArray = date.toString().split(" ");
    return strArray[4];
}

function getUser(){
    user = jagg.getUser();
    if (!user) {
        throw msg.error.loginRequired();
    }else{
        return user;
    }
}


%>